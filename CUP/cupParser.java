
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 17 13:59:45 SAST 2021
//----------------------------------------------------

package CUP;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 17 13:59:45 SAST 2021
  */
public class cupParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public cupParser() {super();}

  /** Constructor which sets the default scanner. */
  public cupParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public cupParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\011\000\002\003" +
    "\005\000\002\003\002\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\007\002\000\002\010\006\000\002\011\006\000\002\012" +
    "\006\000\002\013\006\000\002\014\004\000\002\014\003" +
    "\000\002\015\005\000\002\015\005\000\002\015\004\000" +
    "\002\015\004\000\002\016\005\000\002\016\003\000\002" +
    "\017\005\000\002\017\003\000\002\020\004\000\002\021" +
    "\004\000\002\022\004\000\002\022\002\000\002\023\006" +
    "\000\002\023\006\000\002\023\006\000\002\024\005\000" +
    "\002\024\003\000\002\025\006\000\002\025\002\000\002" +
    "\026\004\000\002\026\003\000\002\027\006\000\002\030" +
    "\005\000\002\030\003\000\002\031\005\000\002\031\003" +
    "\000\002\032\004\000\002\032\002\000\002\033\004\000" +
    "\002\033\003\000\002\034\004\000\002\034\002\000\002" +
    "\035\005\000\002\035\003\000\002\036\005\000\002\036" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\022\004\005\006\ufffe\007\ufffe\012\ufffe\013" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\001\002\000\020\006\ufffc" +
    "\007\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\017\ufffc\001" +
    "\002\000\004\034\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\006\005\uffcd\031\uffcd\001" +
    "\002\000\006\005\012\031\013\001\002\000\020\006\uffff" +
    "\007\uffff\012\uffff\013\uffff\015\uffff\016\uffff\017\uffff\001" +
    "\002\000\004\034\014\001\002\000\010\005\uffce\031\uffce" +
    "\034\uffce\001\002\000\020\006\017\007\ufff5\012\ufff5\013" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\001\002\000\020\006\ufffd" +
    "\007\ufffd\012\ufffd\013\ufffd\015\ufffd\016\ufffd\017\ufffd\001" +
    "\002\000\004\034\010\001\002\000\016\007\023\012\021" +
    "\013\033\015\034\016\030\017\027\001\002\000\004\010" +
    "\143\001\002\000\016\007\ufff6\012\ufff6\013\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\001\002\000\004\010\140\001\002\000" +
    "\016\007\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\001\002\000\014\016\uffef\017\uffef\021\uffef\024\uffef\034" +
    "\uffef\001\002\000\016\007\ufff7\012\ufff7\013\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\001\002\000\004\034\130\001\002\000" +
    "\004\034\115\001\002\000\016\007\ufffa\012\ufffa\013\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\001\002\000\014\016\030\017" +
    "\027\021\uffe3\024\uffe3\034\uffe3\001\002\000\004\014\042" +
    "\001\002\000\004\014\036\001\002\000\016\007\ufff8\012" +
    "\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\001\002\000\004" +
    "\011\037\001\002\000\020\005\041\007\uffc8\012\uffc8\013" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\001\002\000\016\007\ufff1" +
    "\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\001\002\000" +
    "\016\007\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\001\002\000\004\011\043\001\002\000\020\005\041\007" +
    "\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\001\002" +
    "\000\016\007\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\001\002\000\010\021\050\024\052\034\uffdc\001\002" +
    "\000\014\016\ufff0\017\ufff0\021\ufff0\024\ufff0\034\ufff0\001" +
    "\002\000\004\034\072\001\002\000\010\022\056\023\057" +
    "\033\060\001\002\000\010\021\uffe4\024\uffe4\034\uffe4\001" +
    "\002\000\004\014\053\001\002\000\004\034\054\001\002" +
    "\000\004\005\055\001\002\000\004\034\uffdd\001\002\000" +
    "\004\034\061\001\002\000\004\034\061\001\002\000\004" +
    "\034\061\001\002\000\006\005\uffde\020\uffde\001\002\000" +
    "\006\005\064\020\063\001\002\000\004\034\065\001\002" +
    "\000\010\021\uffe0\024\uffe0\034\uffe0\001\002\000\006\005" +
    "\uffdf\020\uffdf\001\002\000\006\005\067\020\063\001\002" +
    "\000\010\021\uffe1\024\uffe1\034\uffe1\001\002\000\006\005" +
    "\071\020\063\001\002\000\010\021\uffe2\024\uffe2\034\uffe2" +
    "\001\002\000\004\025\076\001\002\000\006\002\uffda\034" +
    "\uffda\001\002\000\006\002\000\034\072\001\002\000\006" +
    "\002\uffdb\034\uffdb\001\002\000\014\005\uffd3\011\uffd3\026" +
    "\uffd3\027\uffd3\034\uffd3\001\002\000\006\005\113\026\112" +
    "\001\002\000\006\005\uffd7\026\uffd7\001\002\000\014\005" +
    "\uffd5\011\103\026\uffd5\027\104\034\102\001\002\000\016" +
    "\005\uffcf\011\uffcf\026\uffcf\027\uffcf\030\107\034\uffcf\001" +
    "\002\000\014\005\uffd1\011\uffd1\026\uffd1\027\uffd1\034\uffd1" +
    "\001\002\000\004\034\106\001\002\000\014\005\uffd4\011" +
    "\uffd4\026\uffd4\027\uffd4\034\uffd4\001\002\000\006\005\uffd6" +
    "\026\uffd6\001\002\000\004\034\111\001\002\000\014\005" +
    "\uffd2\011\uffd2\026\uffd2\027\uffd2\034\uffd2\001\002\000\014" +
    "\005\uffd0\011\uffd0\026\uffd0\027\uffd0\034\uffd0\001\002\000" +
    "\014\005\uffd3\011\uffd3\026\uffd3\027\uffd3\034\uffd3\001\002" +
    "\000\006\002\uffd9\034\uffd9\001\002\000\006\005\uffd8\026" +
    "\uffd8\001\002\000\012\005\uffe9\020\uffe9\031\uffcd\034\uffcd" +
    "\001\002\000\006\031\013\034\uffca\001\002\000\014\016" +
    "\uffec\017\uffec\021\uffec\024\uffec\034\uffec\001\002\000\006" +
    "\005\125\020\124\001\002\000\004\034\122\001\002\000" +
    "\006\005\uffe9\020\uffe9\001\002\000\014\016\uffee\017\uffee" +
    "\021\uffee\024\uffee\034\uffee\001\002\000\004\034\126\001" +
    "\002\000\014\016\uffe6\017\uffe6\021\uffe6\024\uffe6\034\uffe6" +
    "\001\002\000\006\005\uffea\020\uffea\001\002\000\014\016" +
    "\uffeb\017\uffeb\021\uffeb\024\uffeb\034\uffeb\001\002\000\012" +
    "\005\uffe7\020\uffe7\031\uffcd\034\uffcd\001\002\000\006\005" +
    "\136\020\135\001\002\000\004\034\134\001\002\000\014" +
    "\016\uffed\017\uffed\021\uffed\024\uffed\034\uffed\001\002\000" +
    "\006\005\uffe7\020\uffe7\001\002\000\004\034\137\001\002" +
    "\000\014\016\uffe5\017\uffe5\021\uffe5\024\uffe5\034\uffe5\001" +
    "\002\000\006\005\uffe8\020\uffe8\001\002\000\004\011\141" +
    "\001\002\000\020\005\041\007\uffc8\012\uffc8\013\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\001\002\000\016\007\ufff4\012\ufff4" +
    "\013\ufff4\015\ufff4\016\ufff4\017\ufff4\001\002\000\004\011" +
    "\144\001\002\000\020\005\041\007\uffc8\012\uffc8\013\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\001\002\000\016\007\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\001\002\000\006" +
    "\005\uffcb\031\151\001\002\000\004\005\150\001\002\000" +
    "\020\006\ufffb\007\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\001\002\000\006\032\152\034\014\001\002\000" +
    "\004\005\uffcc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\002\005\003\003\001\001\000\004\004" +
    "\014\001\001\000\004\035\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\015\007\017\001\001\000\002\001\001\000\006\035" +
    "\145\036\146\001\001\000\020\006\021\010\030\011\023" +
    "\012\034\013\025\014\031\015\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\130\021" +
    "\126\035\115\037\131\001\001\000\012\016\117\020\116" +
    "\035\115\037\120\001\001\000\002\001\001\000\006\015" +
    "\045\022\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\043\001\001\000\002\001\001\000\006\023" +
    "\050\025\046\001\001\000\002\001\001\000\006\026\073" +
    "\027\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\067\001\001\000\004\024\065\001" +
    "\001\000\004\024\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\074\001\001\000\002\001\001\000\010\030\076" +
    "\031\077\032\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\104\001\001\000\004\034\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\113\032\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\117\020" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\130" +
    "\021\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$cupParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$cupParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$cupParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
                Symbol sy = getScanner().next_token();
                return sy;
            
    }



    public void syntax_error(Symbol current_token) {
        System.out.println("Syntax error at line " + (current_token.left+1) + ", column "
            + (current_token.right+1));
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$cupParser$actions {
  private final cupParser parser;

  /** Constructor */
  CUP$cupParser$actions(cupParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$cupParser$do_action(
    int                        CUP$cupParser$act_num,
    java_cup.runtime.lr_parser CUP$cupParser$parser,
    java.util.Stack            CUP$cupParser$stack,
    int                        CUP$cupParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$cupParser$result;

      /* select the action based on the action number */
      switch (CUP$cupParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // opt_semi ::= 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("opt_semi",30, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // opt_semi ::= SEMI 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("opt_semi",30, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_id ::= multipart_id 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("type_id",29, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // import_id ::= multipart_id 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("import_id",28, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // import_id ::= multipart_id DOT STAR 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("import_id",28, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // multipart_id ::= ID 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("multipart_id",27, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // multipart_id ::= multipart_id DOT ID 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("multipart_id",27, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opt_label ::= 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("opt_label",26, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opt_label ::= COLON ID 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("opt_label",26, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // prod_part ::= CODE_STRING 
            {
              String RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("prod_part",25, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // prod_part ::= ID opt_label 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).value;
		 RESULT=id; 
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("prod_part",25, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // prod_part_list ::= 
            {
              CUPConcat RESULT =null;
		
                            RESULT = new CUPConcat();
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("prod_part_list",24, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // prod_part_list ::= prod_part_list prod_part 
            {
              CUPConcat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).right;
		CUPConcat l = (CUPConcat)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            if (p != null) {
                                l.add(p);
                            }
                            RESULT = l;
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("prod_part_list",24, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rhs ::= prod_part_list 
            {
              CUPConcat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPConcat l = (CUPConcat)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		 RESULT = l; 
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("rhs",23, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rhs ::= prod_part_list PERCENT_PREC ID 
            {
              CUPConcat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).right;
		CUPConcat l = (CUPConcat)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).value;
		 RESULT = l; 
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("rhs",23, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rhs_list ::= rhs 
            {
              CUPAlternate RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPConcat r = (CUPConcat)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            RESULT = new CUPAlternate(r);
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("rhs_list",22, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rhs_list ::= rhs_list BAR rhs 
            {
              CUPAlternate RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).right;
		CUPAlternate l = (CUPAlternate)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPConcat r = (CUPConcat)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            l.add(r);
                            RESULT = l;
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("rhs_list",22, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // production ::= ID CC_EQUALS rhs_list SEMI 
            {
              CUPProduc RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).right;
		CUPAlternate a = (CUPAlternate)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).value;
		
                            RESULT = new CUPProduc(n, a);
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("production",21, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // production_list ::= production 
            {
              CUPProductionList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPProduc p = (CUPProduc)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            CUPProductionList pl = new CUPProductionList();
                            pl.add(p);
                            RESULT = pl;
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("production_list",20, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // production_list ::= production_list production 
            {
              CUPProductionList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).right;
		CUPProductionList pl = (CUPProductionList)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPProduc p = (CUPProduc)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            pl.add(p);
                            RESULT = pl;
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("production_list",20, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // start_spec ::= 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("start_spec",19, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // start_spec ::= START WITH ID SEMI 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("start_spec",19, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // terminal_list ::= ID 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("terminal_list",18, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // terminal_list ::= terminal_list COMMA ID 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("terminal_list",18, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // preced ::= PRECEDENCE NONASSOC terminal_list SEMI 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("preced",17, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // preced ::= PRECEDENCE RIGHT terminal_list SEMI 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("preced",17, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // preced ::= PRECEDENCE LEFT terminal_list SEMI 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("preced",17, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // precedence_list ::= 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("precedence_list",16, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // precedence_list ::= precedence_list preced 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("precedence_list",16, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declares_non_term ::= non_term_name_list SEMI 
            {
              CUPAtomList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).right;
		CUPAtomList list = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).value;
		 RESULT = list; 
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("declares_non_term",15, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declares_term ::= term_name_list SEMI 
            {
              CUPAtomList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).right;
		CUPAtomList list = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).value;
		 RESULT = list; 
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("declares_term",14, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // non_term_name_list ::= ID 
            {
              CUPAtomList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            CUPAtomList list = new CUPAtomList();
                            list.add(new CUPNonTerminal(t));
                            RESULT = list;
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("non_term_name_list",13, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // non_term_name_list ::= non_term_name_list COMMA ID 
            {
              CUPAtomList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).right;
		CUPAtomList list = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            list.add(new CUPNonTerminal(t));
                            RESULT = list;
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("non_term_name_list",13, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term_name_list ::= ID 
            {
              CUPAtomList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            CUPAtomList list = new CUPAtomList();
                            list.add(new CUPTerminal(t));
                            RESULT = list;
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("term_name_list",12, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // term_name_list ::= term_name_list COMMA ID 
            {
              CUPAtomList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).right;
		CUPAtomList list = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            list.add(new CUPTerminal(t));
                            RESULT = list;
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("term_name_list",12, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // symbol ::= NONTERMINAL declares_non_term 
            {
              CUPAtomList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPAtomList list = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		 RESULT = list; 
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("symbol",11, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbol ::= TERMINAL declares_term 
            {
              CUPAtomList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPAtomList list = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		 RESULT = list; 
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("symbol",11, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // symbol ::= NONTERMINAL type_id declares_non_term 
            {
              CUPAtomList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPAtomList list = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		 RESULT = list; 
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("symbol",11, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // symbol ::= TERMINAL type_id declares_term 
            {
              CUPAtomList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPAtomList list = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		 RESULT = list; 
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("symbol",11, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // symbol_list ::= symbol 
            {
              CUPAtomList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPAtomList list = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            RESULT = list;
                      
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("symbol_list",10, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // symbol_list ::= symbol_list symbol 
            {
              CUPAtomList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).right;
		CUPAtomList list = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPAtomList l = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            list.addList(l);
                            RESULT = list;
                      
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("symbol_list",10, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("scan_code",9, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("init_code",8, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("parser_code_part",7, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("action_code_part",6, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_parts ::= 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("code_parts",5, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_parts ::= code_parts code_part 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("code_parts",5, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= scan_code 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("code_part",4, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_part ::= init_code 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("code_part",4, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= parser_code_part 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("code_part",4, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // code_part ::= action_code_part 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("code_part",4, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_spec ::= IMPORT import_id SEMI 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("import_spec",3, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_list ::= 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("import_list",2, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // import_list ::= import_list import_spec 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("import_list",2, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_spec ::= 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("package_spec",1, ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // package_spec ::= PACKAGE multipart_id SEMI 
            {
              Object RESULT =null;

              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("package_spec",1, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-2)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // java_cup_spec ::= package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              CUPGrammar RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)).right;
		CUPAtomList sl = (CUPAtomList)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()).right;
		CUPProductionList pl = (CUPProductionList)((java_cup.runtime.Symbol) CUP$cupParser$stack.peek()).value;
		
                            RESULT = new CUPGrammar(sl, pl);
                       
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("java_cup_spec",0, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-6)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          return CUP$cupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= java_cup_spec EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).right;
		CUPGrammar start_val = (CUPGrammar)((java_cup.runtime.Symbol) CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)).value;
		RESULT = start_val;
              CUP$cupParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$cupParser$stack.elementAt(CUP$cupParser$top-1)), ((java_cup.runtime.Symbol)CUP$cupParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$cupParser$parser.done_parsing();
          return CUP$cupParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

